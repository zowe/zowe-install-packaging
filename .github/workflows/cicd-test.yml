name: Zowe CICD Integration Tests
on:
  workflow_dispatch:
    inputs:
      test-file-server:
        description: 'Test File and Running Server:'
        required: true
      custom-zowe-artifactory-pattern:
        description: 'Custom Zowe Artifactory Pattern:'
        required: false
      custom-zowe-cli-artifactory-pattern:
        description: 'Custom Zowe CLI Artifactory Pattern:'
        required: false
      custom-extension-list:
        description: 'Custom Extension List:'
        required: false
        default: 'sample-node-api;sample-trial-app'
      custom-zowe-tp-docker-artifactory-pattern:
        description: 'Custom Zowe Tech Preview Docker Artifactory Pattern:'
        required: false

# create a new branch to overwrite following defaults if necessary
env: 
  # constants
  INSTALL_TEST_PATH: tests/installation
  SANITY_TEST_PATH: tests/sanity
  DEFAULT_ZOWE_PAX_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/*{branch-name}*.pax
  DEFAULT_ZOWE_SMPE_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/*zowe-smpe*{branch-name}*.zip
  DEFAULT_ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/*server-bundle.amd64*{branch-name}*.tar
  DEFAULT_ZOWE_CLI_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/cli/zowe-cli-package/*/zowe-cli-package-1*.zip
  DEFAULT_ZOWE_EXT_ARTIFACTORY_PATTERN: libs-snapshot-local/org/zowe/{ext-name}/*/{ext-name}-*.pax
  
  # can be overwritten, adjusted by DevOps only
  ZOS_NODE_VERSION: v12.18.4
  # ZOS_NODE_VERSION more to choose from: v8.16.0, v8.17.0, v12.13.0, v14.15.1
  # v12.16.1 is problematic, use it cautiously
  CLIENT_NODE_VERSION: v12.18.3
  INSTALL_TEST_DEBUG_INFORMATION: zowe-install-test:*
  SANITY_TEST_DEBUG_INFORMATION: zowe-sanity-test:*
      
jobs:
  check-permission:
    runs-on: ubuntu-latest
    steps:
      # this action will fail the whole workflow if permission check fails
      - name: check permission
        uses: zowe-actions/shared-actions/permission-check@main
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          
  make-matrix:
    runs-on: ubuntu-latest
    needs: check-permission
    steps: 
    - name: make matrix
      id: set-matrix
      run: |
        # sanitize all whitespaces
        TEST_FILE_SERVER=$(echo "${{ github.event.inputs.test-file-server }}" | tr -d "[:space:]")

        # validate
        if [[ $TEST_FILE_SERVER =~ ^([A-Za-z0-9/-]+\.ts\((zzow02|zzow03|zzow04)(,(zzow02|zzow03|zzow04))*\))(;[A-Za-z0-9/-]+\.ts\((zzow02|zzow03|zzow04)(,(zzow02|zzow03|zzow04))*\))*$ ]]; then
          echo "Syntax validation success!"
        else
          echo "Input test-file-server is not valid."
          echo "Format:{testpath}/{testfile}.ts(zzow02[,zzow03][,zzow04]) semi-colon separated if multiple"
          echo "Examples: tests/file1.ts(zzow02,zzow04);tests/file2.ts(zzow03)"
          exit 1
        fi

        MATRIX_JSON_STRING="{\"include\":["
        for each_test_file_server in $(echo "$TEST_FILE_SERVER" | sed "s/;/ /g")
        do
          test_file=$(echo "$each_test_file_server" | cut -d "(" -f1)
          for test_server in $(echo "$each_test_file_server" | cut -d "(" -f2 | cut -d ")" -f1 | sed "s/,/ /g")
          do
            MATRIX_JSON_STRING="$MATRIX_JSON_STRING{\"test\":\"$test_file\",\"server\":\"marist-$test_server\"},"
          done
        done

        # remove trailing comma
        MATRIX_JSON_STRING=$(echo $MATRIX_JSON_STRING | sed 's/,$//g')

        MATRIX_JSON_STRING="$MATRIX_JSON_STRING]}"
        echo "::set-output name=matrix::$MATRIX_JSON_STRING"

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  cicd-test:
    runs-on: ubuntu-latest
    needs: make-matrix
    strategy:
      matrix: ${{ fromJson(needs.make-matrix.outputs.matrix) }}
      fail-fast: false
    environment: ${{ matrix.server }}
    steps:
      - name: '[Prep 1] Checkout'
        uses: actions/checkout@v2

      - name: '[Prep 2] Cache node modules'
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            ~/.nvm/.cache
            ~/.nvm/versions
          key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('tests/installation/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-cache-node-modules-
      
      - name: '[Prep 3] Setup jFrog CLI'
        uses: jfrog/setup-jfrog-cli@v2
        env:
          JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_TOKEN }}

      - name: '[Prep 4] Validate package.json'
        uses: zowe-actions/shared-actions/validate-package-json@main
          
      - name: '[Prep 5] Prepare workflow'
        uses: zowe-actions/shared-actions/prepare-workflow@main

      - name: '[Prep 6] Additional Prep work'
        id: more-test-prep
        run: |
          CURRENT_BRANCH_NEW=$(echo ${{ env.CURRENT_BRANCH }} | tr '[:upper:]' '[:lower:]' | sed "s#\/#-#g")

          function jfrog_search {
            search_pattern=$1
            if [[ -z "$search_pattern" ]]; then
              echo "In jfrog search function, search pattern is not provided" > /dev/stderr
              exit 1
            fi
            out=$(jfrog rt search --sort-by=created --sort-order=desc --limit=1 $search_pattern | jq -r '.[].path')
            if [[ -z "$out" ]]; then
              echo "Cannot find latest artifact in pattern: $search_pattern" > /dev/stderr
              exit 1
            fi
            echo $out
          }

          ##################################################################################################
          ### Process custom-zowe-artifactory-pattern
          ##################################################################################################
          ZOWE_ARTIFACTORY_PATTERN_INTERIM=
          input_custom_zowe_art=${{ github.event.inputs.custom-zowe-artifactory-pattern }}
          if [[ -z "$input_custom_zowe_art" ]]; then
            # custom input is empty, we set default no matter running smpe test or not
            if [[ "${{ matrix.test }}" == *"install-fmid"* ]] || [[ "${{ matrix.test }}" == *"install-ptf"* ]]; then
              ZOWE_ARTIFACTORY_PATTERN_INTERIM="${{ env.DEFAULT_ZOWE_SMPE_ARTIFACTORY_PATTERN }}"
            else
              ZOWE_ARTIFACTORY_PATTERN_INTERIM="${{ env.DEFAULT_ZOWE_PAX_ARTIFACTORY_PATTERN }}"
            fi
          else
            # validate custom zowe artifactory path input
            if [[ "$input_custom_zowe_art" =~ ^([^;]+)(;[^;]+)?$ ]]; then
              echo "custom zowe artifactory path input validation success!"
            else
              echo "custom zowe artifactory path input validation failed"
              echo "You must follow the format: {path1};{path2}"
              echo "Example input will be:"
              echo "path1/zowe.pax;path2/zowe-smpe.pax"
              echo "You can at most supply two customized paths, one for pax one for smpe and separated by semi-colon."
            fi

            for each_zowe_art_pattern in $(echo "$input_custom_zowe_art" | sed "s/;/ /g")
            do
              if ([[ "${{ matrix.test }}" == *"install-fmid"* ]] || [[ "${{ matrix.test }}" == *"install-ptf"* ]]) && [[ "$input_custom_zowe_art" != *"zowe-smpe"* ]] && [[ "$input_custom_zowe_art" != *"zip"* ]]; then
                # if it is valid smpe.zip format, we will hornour this custom input
                ZOWE_ARTIFACTORY_PATTERN_INTERIM="$input_custom_zowe_art"
              else
                # otherwise use smpe default
                ZOWE_ARTIFACTORY_PATTERN_INTERIM="${{ env.DEFAULT_ZOWE_SMPE_ARTIFACTORY_PATTERN }}"
              fi
              if [[ "${{ matrix.test }}" == *"install.ts"* ]] && [[ "$input_custom_zowe_art" != *"pax"* ]]; then
                # if it is valid pax format, we will hornour this custom input
                ZOWE_ARTIFACTORY_PATTERN_INTERIM="$input_custom_zowe_art"
              else
                # otherwise use pax default
                ZOWE_ARTIFACTORY_PATTERN_INTERIM="${{ env.DEFAULT_ZOWE_PAX_ARTIFACTORY_PATTERN }}"
              fi
            done
          fi
          ZOWE_ARTIFACTORY_PATTERN_FINAL=$(echo "$ZOWE_ARTIFACTORY_PATTERN_INTERIM" | sed "s#{branch-name}#$CURRENT_BRANCH_NEW#g")
          ZOWE_ARTIFACTORY_FINAL=$(jfrog_search $ZOWE_ARTIFACTORY_PATTERN_FINAL)
          # next line is just to get the pax file name - extract the part after last occurance of slash
          ZOWE_ARTIFACTORY_FINAL_FILENAME=${ZOWE_ARTIFACTORY_FINAL##*/}
          echo "Zowe pax or smpe.zip artifactory full path processing complete!"

          ##################################################################################################
          ### Process TEST_SERVER_NICKNAME
          ##################################################################################################
          TEST_SERVER=$(echo "${{ matrix.server }}" | cut -d "-" -f2)
          TEST_SERVER_NICKNAME=
          if [[ "$TEST_SERVER" == "zzow02" ]] ; then
            TEST_SERVER_NICKNAME=marist-2
          fi
          if [[ "$TEST_SERVER" == "zzow03" ]] ; then
            TEST_SERVER_NICKNAME=marist-3
          fi
          if [[ "$TEST_SERVER" == "zzow04" ]] ; then
            TEST_SERVER_NICKNAME=marist-4
          fi
          echo "Test server name processing complete!"

          ##################################################################################################
          ### Process custom-extension-list
          ##################################################################################################
          if [[ "${{ matrix.test }}" == *"install-ext"* ]]; then
            EXTENSION_LIST=
            if [[ -z "${{ github.event.inputs.custom-extension-list }}" ]]; then
              echo "You are running install-ext test, but input 'custom-extension-list' is missing"
              exit 1
            fi
            
            # validate extension list input
            if [[ "${{ github.event.inputs.custom-extension-list }}" =~ ^([^;:]+(:[^;:]+)*)(;[^;:]+(:[^;:]+)*)*$ ]]; then
              echo "extension list syntax validation success!"
            else
              echo "extension list validation failed"
              echo "You must follow the format: {ext-name}[:{custom-ext-pattern}][;...]"
              echo "Example input will be:"
              echo "sample-ext;sample-ext2;sample-myext"
              echo "sample-ext:myown/path;sample-myext"
            fi

            for each_ext in $(echo "${{ github.event.inputs.custom-extension-list }}" | sed "s/;/ /g")
            do
              ext_name=
              ext_pattern=
              if [[ "$each_ext" == *":"* ]]; then
                # user provides custom artifactory pattern
                ext_name=$(echo "$each_ext" | cut -d ":" -f1)
                ext_pattern=$(echo "$each_ext" | cut -d ":" -f2)
              else
                # use default
                ext_name="$each_ext"
                ext_pattern=$(echo "${{ env.DEFAULT_ZOWE_EXT_ARTIFACTORY_PATTERN }}" | sed "s#{ext-name}#$ext_name#g")
              fi
              ext_full_path=$(jfrog_search $ext_pattern)
              EXTENSION_LIST="$EXTENSION_LIST$ext_name:$ext_full_path,"
            done

            # remove trailing comma
            EXTENSION_LIST=$(echo $EXTENSION_LIST | sed 's/,$//g')
            echo "Zowe extension list processing complete!"
          fi

          ##################################################################################################
          ### Process custom-zowe-cli-artifactory-pattern
          ##################################################################################################
          ZOWE_CLI_ARTIFACTORY_PATTERN=
          if [[ -z "${{ github.event.inputs.custom-zowe-cli-artifactory-pattern }}" ]]; then
            ZOWE_CLI_ARTIFACTORY_PATTERN="${{ env.DEFAULT_ZOWE_CLI_ARTIFACTORY_PATTERN }}"
          else
            ZOWE_CLI_ARTIFACTORY_PATTERN="${{ github.event.inputs.custom-zowe-cli-artifactory-pattern }}"
          fi
          ZOWE_CLI_ARTIFACTORY_FINAL=$(jfrog_search $ZOWE_CLI_ARTIFACTORY_PATTERN)
          echo "Zowe CLI artifactory full path processing complete!"

          ##################################################################################################
          ### Process custom-zowe-tp-docker-artifactory-pattern
          ##################################################################################################
          if [[ "${{ matrix.test }}" == *"install-docker"* ]]; then
            ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN=
            if [[ -z "${{ github.event.inputs.custom-zowe-tp-docker-artifactory-pattern }}" ]]; then
              ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN=$(echo "${{ env.DEFAULT_ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN }}" | sed "s#{branch-name}#$CURRENT_BRANCH_NEW#g")
            else
              ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN="${{ github.event.inputs.custom-zowe-tp-docker-artifactory-pattern }}"
            fi
            ZOWE_TP_DOCKER_ARTIFACTORY_FINAL="https://zowe.jfrog.io/zowe/$(jfrog_search $ZOWE_TP_DOCKER_ARTIFACTORY_PATTERN)"
            echo "Zowe tech preview docker artifactory full path processing complete!"
          fi  

          ##################################################################################################
          ### Set outputs
          ##################################################################################################
          echo ::set-output name=ZOWE_ARTIFACTORY_FINAL::$ZOWE_ARTIFACTORY_FINAL
          echo ::set-output name=ZOWE_ARTIFACTORY_FINAL_FILENAME::$ZOWE_ARTIFACTORY_FINAL_FILENAME
          echo ::set-output name=NODE_HOME_PATTERN::/ZOWE/node/node-${{ env.ZOS_NODE_VERSION }}-os390-s390x
          echo ::set-output name=TEST_SERVER::$TEST_SERVER
          echo ::set-output name=TEST_SERVER_NICKNAME::$TEST_SERVER_NICKNAME
          echo ::set-output name=EXTENSION_LIST::$EXTENSION_LIST
          echo ::set-output name=ZOWE_CLI_ARTIFACTORY_FINAL::$ZOWE_CLI_ARTIFACTORY_FINAL
          echo ::set-output name=ZOWE_TP_DOCKER_ARTIFACTORY_FINAL::$ZOWE_TP_DOCKER_ARTIFACTORY_FINAL

          ##################################################################################################
          ### Echo all processed outputs
          ##################################################################################################
          echo 
          echo "########Summary of outputs:########"
          echo "Zowe artifactory path: "$ZOWE_ARTIFACTORY_FINAL
          echo "Zowe artifactory file name: "$ZOWE_ARTIFACTORY_FINAL_FILENAME
          echo "Zowe CLI artifactory path: "$ZOWE_CLI_ARTIFACTORY_FINAL
          echo "Zowe TP Docker artifactory path: "$ZOWE_TP_DOCKER_ARTIFACTORY_FINAL
          echo "Zowe extension list: "$EXTENSION_LIST
          echo "Test server: "$TEST_SERVER
          echo "Test server nickname: "$TEST_SERVER_NICKNAME
          echo "Node home pattern on z/OS: /ZOWE/node/node-${{ env.ZOS_NODE_VERSION }}-os390-s390x"
          
      - name: '[Setup 1] Project Setup 1'
        working-directory: ${{ env.INSTALL_TEST_PATH }}
        run: |
          npm ci
          npm run build
      
      - name: '[Setup 2] Project Setup 2'
        working-directory: ${{ env.SANITY_TEST_PATH }}
        run: |
          npm ci

      # - name: '[Lint 1] Lint 1'
      #   timeout-minutes: 2
      #   working-directory: ${{ env.INSTALL_TEST_PATH }}
      #   run: |
      #     npm run lint
      
      # - name: '[Lint 2] Lint 2'
      #   timeout-minutes: 2
      #   working-directory: ${{ env.SANITY_TEST_PATH }}
      #   run: |
      #     npm run lint

      - name: '[Download 1] Download zowe.pax or smpe-zowe.zip'
        uses: zowe-actions/shared-actions/jfrog-download@main
        with:
          source-path-or-pattern: ${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL }}
          default-target-path: ${{ runner.temp }}/zowe/
          extra-options: --flat=true
          expected-count: 1

      - name: '[Download 2] Download cli package'
        uses: zowe-actions/shared-actions/jfrog-download@main
        with:
          source-path-or-pattern: ${{ steps.more-test-prep.outputs.ZOWE_CLI_ARTIFACTORY_FINAL }}
          default-target-path: ${{ runner.temp }}/cli/
          extra-options: --flat=true --explode=true
          expected-count: 1

      - name: '[Install] Install CLI'
        timeout-minutes: 10
        working-directory: ${{ runner.temp }}/cli
        run: npm install -g zowe-cli*.tgz

      - name: '[LOCK] Lock marist servers'
        uses: zowe-actions/shared-actions/lock-resource@main
        with:
          lock-repository: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lock-resource-name: zowe-install-test-${{ steps.more-test-prep.outputs.TEST_SERVER }}-lock 
          lock-avg-retry-interval: 60
        
      # - name: '[Test] Test starts from here'
      #   timeout-minutes: 360
      #   working-directory: ${{ env.INSTALL_TEST_PATH }}
      #   run: npm test -- --testPathPattern --detectOpenHandles dist/__tests__/$(echo ${{ matrix.test }} | sed "s/.ts/.js/g")
      #   env:
      #     ANSIBLE_FORCE_COLOR: true
      #     TEST_SERVER: ${{ steps.more-test-prep.outputs.TEST_SERVER_NICKNAME }}
      #     ZOWE_BUILD_LOCAL: "${{ runner.temp }}/zowe/${{ steps.more-test-prep.outputs.ZOWE_ARTIFACTORY_FINAL_FILENAME }}"
      #     ZOWE_DOCKER_URL: ${{ steps.more-test-prep.outputs.ZOWE_TP_DOCKER_ARTIFACTORY_FINAL }}
      #     EXTENSIONS_LIST: ${{ steps.more-test-prep.outputs.EXTENSION_LIST }}
      #     SANITY_TEST_DEBUG: ${{ env.SANITY_TEST_DEBUG_INFORMATION }}
      #     DEBUG: ${{ env.INSTALL_TEST_DEBUG_INFORMATION }}
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_PORT: ${{ secrets.SSH_PORT }}
      #     SSH_USER: ${{ secrets.SSH_USER }}
      #     SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      #     ZOS_NODE_HOME: ${{ steps.more-test-prep.outputs.NODE_HOME_PATTERN }}
      #     # ANSIBLE_VERBOSE: -vvv
      
      # - name: '[After Test] Merge Report'
      #   if: always()
      #   working-directory: ${{ env.INSTALL_TEST_PATH }}
      #   run: npm run merge-reports

