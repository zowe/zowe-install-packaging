name: Zowe CICD Integration Tests
on:
  workflow_dispatch:
    inputs:
      test-scope:
        description: 'Test Scope: (specify test file path); comma separated if multiple'
        required: true
      test-server:
        description: 'Test Server: (choose from RACF, ACF2 or TSS); comma separated if multiple'
        required: true
      zowe-artifactory-pattern:
        description: 'Zowe Artifactory Pattern: (usually leave as-is unless specify static path)'
        required: true
        default: 'libs-snapshot-local/org/zowe/*{branch-name}*.pax'
      zowe-cli-artifactory-pattern:
        description: 'Zowe CLI Artifactory Pattern:'
        required: true
        default: 'libs-snapshot-local/org/zowe/cli/zowe-cli-package/*/zowe-cli-package-1*.zip'
      extension-list:
        description: 'Extension List:'
        required: false
      zowe-docker-artifactory-build:
        description: 'Zowe Docker Artifactory Build:'
        required: false

# create a new branch to overwrite following defaults if necessary
env: 
  # constants
  INSTALL_TEST_PATH: tests/installation
  SANITY_TEST_PATH: tests/sanity

  # can be overwritten
  ZOS_NODE_VERSION: v12.18.4
  # ZOS_NODE_VERSION more to choose from: v8.16.0, v8.17.0, v12.13.0, v12.16.1, v14.15.1
  CLIENT_NODE_VERSION: v12.18.3
  INSTALL_TEST_DEBUG_INFORMATION: zowe-install-test:*
  SANITY_TEST_DEBUG_INFORMATION: zowe-sanity-test:*
      
jobs:
  check-permission:
    runs-on: ubuntu-latest
    steps:
      # this action will fail the whole workflow if permission check fails
      - name: check permission
        uses: zowe-actions/shared-actions/permission-check@main
        with:
          user: ${{ github.actor }}
          github-repo: ${{ github.repository }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          

  make-matrix:
    runs-on: ubuntu-latest
    needs: check-permission
    steps:
    - name: validation
      run: |
        if [[ "${{ github.event.inputs.test-server}}" != *"RACF"* ]] && [[ "${{ github.event.inputs.test-server}}" != *"ACF2"* ]] && [[ "${{ github.event.inputs.test-server}}" != *"TSS"* ]] ; then
          echo "input 'test server' must be at least 'RACF', 'ACF2' or 'TSS'"
          exit 1
        fi

    - name: make matrix
      id: set-matrix
      run: |
        MATRIX_JSON_STRING="{\"include\":["
        for testfile in $(echo "${{ github.event.inputs.test-scope }}" | sed "s/,/ /g")
        do
          # sanitize whitespace
          testfile=$(echo "$testfile" | xargs)
          for testserver in $(echo "${{ github.event.inputs.test-server }}" | sed "s/,/ /g")
          do
            # sanitize whitespace
            testserver=$(echo "$testserver" | xargs)
            MATRIX_JSON_STRING="$MATRIX_JSON_STRING{\"test\":\"$testfile\",\"env\":\"MARIST_$testserver\"},"
          done
        done

        # remove trailing comma
        MATRIX_JSON_STRING=$(echo $MATRIX_JSON_STRING | sed 's/,$//g')

        MATRIX_JSON_STRING="$MATRIX_JSON_STRING]}"
        echo "::set-output name=matrix::$MATRIX_JSON_STRING"

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  cicd-test:
    runs-on: ubuntu-latest
    needs: make-matrix
    strategy:
      matrix: ${{ fromJson(needs.make-matrix.outputs.matrix) }}
    environment: ${{ matrix.env }}
    steps:
      # - name: '[Prep 1] Checkout'
      #   uses: actions/checkout@v2

      # - name: '[Prep 2] Cache node modules'
      #   uses: actions/cache@v2
      #   with:
      #     # npm cache files are stored in `~/.npm` on Linux/macOS
      #     path: |
      #       ~/.npm
      #       ~/.nvm/.cache
      #       ~/.nvm/versions
      #     key: ${{ runner.os }}-build-cache-node-modules-${{ hashFiles('tests/installation/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-cache-node-modules-
      
      # - name: '[Prep 3] Setup jFrog CLI'
      #   uses: jfrog/setup-jfrog-cli@v2
      #   env:
      #     JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_TOKEN }}

      # - name: '[Prep 4] Validate package.json'
      #   uses: zowe-actions/shared-actions/validate-package-json@main
          
      # - name: '[Prep 5] Prepare workflow'
      #   uses: zowe-actions/shared-actions/prepare-workflow@main
      #   with:
      #     github-user: ${{ secrets.ZOWE_ROBOT_USER }}
      #     github-password: ${{ secrets.ZOWE_ROBOT_TOKEN }}
      #     github-email: ${{ secrets.ZOWE_ROBOT_EMAIL }}

      # - name: '[Prep 6] Additional Prep work'
      #   run: |
      #     echo NODE_HOME_PATTERN="/ZOWE/node/node-${{ env.ZOS_NODE_VERSION }}-os390-s390x" >> $GITHUB_ENV
      #     CURRENT_BRANCH_NEW=$(echo ${{ env.CURRENT_BRANCH }} | tr '[:upper:]' '[:lower:]' | sed "s#\/#-#g")
      #     if [[ "${{ github.event.inputs.zowe-artifactory-pattern }}" == *"{branch-name}"* ]]; then
      #       echo ZOWE_ARTIFACTORY_PATTERN_FINAL=$(echo "${{ github.event.inputs.zowe-artifactory-pattern }}" | sed "s#{branch-name}#$CURRENT_BRANCH_NEW#g") >> $GITHUB_ENV
      #     fi

      # - name: '[Setup 1] Project Setup 1'
      #   working-directory: ${{ env.INSTALL_TEST_PATH }}
      #   run: |
      #     npm ci
      #     npm run build
      
      # - name: '[Setup 2] Project Setup 2'
      #   working-directory: ${{ env.SANITY_TEST_PATH }}
      #   run: |
      #     npm ci

      # - name: '[Lint 1] Lint 1'
      #   timeout-minutes: 2
      #   working-directory: ${{ env.INSTALL_TEST_PATH }}
      #   run: |
      #     npm run lint
      
      # - name: '[Lint 2] Lint 2'
      #   timeout-minutes: 2
      #   working-directory: ${{ env.SANITY_TEST_PATH }}
      #   run: |
      #     npm run lint

      # - name: '[Pre-Download 1] Determine if we need to pick latest artifact'
      #   id: process-extra-options-1
      #   run: |
      #     if [[ "${{ env.ZOWE_ARTIFACTORY_PATTERN_FINAL }}" == *'*'* ]] ; then
      #       echo ::set-output name=EXTRA_OPTIONS::--flat=true --sort-by=created --sort-order=desc --limit=1
      #     else
      #       echo ::set-output name=EXTRA_OPTIONS::--flat=true
      #     fi

      # - name: '[Download 1] Download zowe.pax'
      #   uses: zowe-actions/shared-actions/jfrog-download@main
      #   with:
      #     source-path-or-pattern: ${{ env.ZOWE_ARTIFACTORY_PATTERN_FINAL }}
      #     default-target-path: ${{ runner.temp }}/zowe/
      #     extra-options: ${{ steps.process-extra-options-1.outputs.EXTRA_OPTIONS }}
      #     expected-count: 1

      # - name: '[Pre-Download 2] Determine if we need to pick latest artifact'
      #   id: process-extra-options-2
      #   run: |
      #     if [[ "${{ github.event.inputs.zowe-cli-artifactory-pattern }}" == *'*'* ]] ; then
      #       echo ::set-output name=EXTRA_OPTIONS::--flat=true --explode=true --sort-by=created --sort-order=desc --limit=1
      #     else
      #       echo ::set-output name=EXTRA_OPTIONS::--flat=true --explode=true
      #     fi
      
      # - name: '[Download 2] Download cli package'
      #   uses: zowe-actions/shared-actions/jfrog-download@main
      #   with:
      #     source-path-or-pattern: ${{ github.event.inputs.zowe-cli-artifactory-pattern }}
      #     default-target-path: ${{ runner.temp }}/cli/
      #     extra-options: ${{ steps.process-extra-options-2.outputs.EXTRA_OPTIONS }}
      #     expected-count: 1

      # - name: '[Install] Install CLI'
      #   timeout-minutes: 10
      #   working-directory: ${{ runner.temp }}/cli
      #   run: npm install -g zowe-cli*.tgz

      - name: pretend I am running test now
        run: sleep 60

      # - name: '[Test Prep] Additional command to run to prepare for test'
      #   id: more-test-prep
      #   run: |
      #     echo ::set-output name=ZOWEPAXFILE::$(ls -1 ${{ runner.temp }}/zowe/)
      #     if [[ "${{ github.event.inputs.test-server }}" == "RACF" ]] ; then
      #   TODO:
          

      # - name: '[Test] Test starts from here'
      #   timeout-minutes: 360
      #   working-directory: ${{ env.INSTALL_TEST_PATH }}
      #   run: npm test -- --testPathPattern --detectOpenHandles dist/__tests__/${{ github.event.inputs.test-scope }}
      #   env:
      #     ANSIBLE_FORCE_COLOR: true
      #     TEST_SERVER: marist-4
      #     ZOWE_BUILD_LOCAL: "${{ runner.temp }}/zowe/${{ steps.more-test-prep.outputs.ZOWEPAXFILE}}"
      #     ZOWE_DOCKER_URL: ${{ github.event.inputs.zowe-docker-artifactory-build }}
      #     EXTENSIONS_LIST: ${{ github.event.inputs.extension-list }}
      #     SANITY_TEST_DEBUG: ${{ env.SANITY_TEST_DEBUG_INFORMATION }}
      #     DEBUG: ${{ env.INSTALL_TEST_DEBUG_INFORMATION }}
      #     SSH_HOST: ${{ secrets.SSH_HOST }}
      #     SSH_PORT: ${{ secrets.SSH_PORT }}
      #     SSH_USER: ${{ secrets.SSH_USERNAME }}
      #     SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      #     ZOS_NODE_HOME: ${{ env.NODE_HOME_PATTERN }}
      #     # ANSIBLE_VERBOSE: -vvv
      
      # - name: '[After Test] Merge Report'
      #   if: always()
      #   working-directory: ${{ env.INSTALL_TEST_PATH }}
      #   run: npm run merge-reports
