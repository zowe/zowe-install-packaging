#!groovy

/**
 * This program and the accompanying materials are made available under the terms of the
 * Eclipse Public License v2.0 which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Copyright IBM Corporation 2020
 */

// Provide possibility to specify node.js version in Jenkins agent
// this value should match the Jenkins node we are using
String NVM_INIT_SCRIPT = '/home/jenkins/.nvm/nvm.sh'
def nvmShell(nodeVersion, script) {
  if (nodeVersion != "") {
    // NVM_INIT_SCRIPT is not reachbale here
    sh "set +x\n. /home/jenkins/.nvm/nvm.sh\nnvm use ${nodeVersion}\nset -x\n${script}"
  } else {
    sh script
  }
}

node('zowe-jenkins-agent-dind-wdc') {
  String INSTALL_TEST_PATH = 'tests/installation'
  String SANITY_TEST_PATH = 'tests/sanity'

  // Test server configurations:
  // - ansible host id
  // - credential id for ssh server hostname and port
  // - credential id for ssh username and password
  Map TEST_SERVERS = [
    'marist': [
      ansible_host     : 'marist-1',
      ssh_hostport     : 'ssh-marist-server-zzow01-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow01',
      node_home_pattern: '/ZOWE/node/node-{NODE_VERSION}-os390-s390x'
    ],
    'marist-2': [
      ansible_host     : 'marist-2',
      ssh_hostport     : 'ssh-marist-server-zzow02-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow02',
      node_home_pattern: '/ZOWE/node/node-{NODE_VERSION}-os390-s390x'
    ],
    'marist-3': [
      ansible_host     : 'marist-3',
      ssh_hostport     : 'ssh-marist-server-zzow03-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow03',
      node_home_pattern: '/ZOWE/node/node-{NODE_VERSION}-os390-s390x'
    ],
    'marist-4': [
      ansible_host     : 'marist-4',
      ssh_hostport     : 'ssh-marist-server-zzow04-hostport',
      ssh_userpass     : 'ssh-marist-server-zzow01',
      node_home_pattern: '/ZOWE/node/node-{NODE_VERSION}-os390-s390x'
    ]
  ];
  // Test scopes, what test should we run
  // each scope can have these optional configurations
  // - jenkins_primary_lock: should be a string
  // - jenkins_extra_locks: should be a list of strings
  Map TEST_SCOPES = [
    'convenience build': [
      test_files: 'dist/__tests__/basic/install.js',
    ],
    'smpe fmid': [
      test_files: 'dist/__tests__/basic/install-fmid.js',
    ],
    'smpe ptf': [
      test_files: 'dist/__tests__/basic/install-ptf.js',
    ],
    'test docker': [
      test_files: 'dist/__tests__/basic/install-docker.js',
    ],
    'test ext': [
      test_files: 'dist/__tests__/basic/install-ext.js',
    ],
    'test keyring': [
      test_files: 'dist/__tests__/extended/keyring.js',
    ],
    'install smpe ptf 2 times': [
      test_files: 'dist/__tests__/extended/ptf/install-ptf-two-times.js',
    ],
    'enable VERIFY_CERTIFICATES': [
      test_files: 'dist/__tests__/extended/certificates/verify-certificates.js',
    ],
    'enable NONSTRICT_VERIFY_CERTIFICATES': [
      test_files: 'dist/__tests__/extended/certificates/nonstrict-verify-certificates.js',
    ],
    'external certificate': [
      test_files: 'dist/__tests__/extended/certificates/external-certificate.js',
    ],
    'enabled VERIFY_CERTIFICATES with external certificate': [
      test_files: 'dist/__tests__/extended/certificates/verify-external-certificate.js',
    ],
    'enabled NONSTRICT_VERIFY_CERTIFICATES with external certificate': [
      test_files: 'dist/__tests__/extended/certificates/nonstrict-verify-external-certificate.js',
    ],
    'bundle: multiple node versions': [
      test_files: 'dist/__tests__/extended/node-versions/'
    ],
    'bundle: convenience build on multiple security systems': [
      test_files: 'dist/__tests__/extended/security-systems/convenience/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
    'bundle: smpe fmid on multiple security systems': [
      test_files: 'dist/__tests__/extended/security-systems/fmid/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
    'bundle: smpe ptf on multiple security systems': [
      test_files: 'dist/__tests__/extended/security-systems/ptf/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
    'bundle: all extended tests': [
      test_files: 'dist/__tests__/extended/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
    'bundle: keyring on multiple security systems': [
      test_files: 'dist/__tests__/extended/keyring-modes/',
      jenkins_primary_lock: 'marist',
      jenkins_extra_locks: ['marist-2', 'marist-3'],
    ],
    'generate api documentation': [
      test_files: 'dist/__tests__/basic/install-api-gen.js',
      jenkins_primary_lock: 'marist',
    ]
  ]

  def lib = library("jenkins-library").org.zowe.jenkins_shared_library

  def pipeline = lib.pipelines.generic.GenericPipeline.new(this)

  pipeline.admins.add("jackjia")

  int prPostCommentID
  String commentText

  // we have extra parameters for integration test
  pipeline.addBuildParameters(
    booleanParam(
      name: 'STARTED_BY_AUTOMATION',
      description: 'If this task is started with pipeline automation. Set to true if you want to skip the Continue prompt question.',
      defaultValue: false
    ),
    // >>>>>>>> parameters of where and what to test
    choice(
      name: 'TEST_SERVER',
      choices: TEST_SERVERS.keySet().collect(),
      description: 'Choose which server to run test',
      trim: true
    ),
    choice(
      name: 'TEST_SCOPE',
      choices: TEST_SCOPES.keySet().collect(),
      description: 'Choose scope of test. PLEASE NOTE: a test scope bundle usually ignores the value of TEST_SERVER.',
      trim: true
    ),
    // >>>>>>>> parameters of artifactory
    string(
      name: 'ZOWE_ARTIFACTORY_PATTERN',
      description: 'Zowe artifactory download pattern',
      defaultValue: 'libs-snapshot-local/org/zowe/*.pax',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_ARTIFACTORY_BUILD',
      description: 'Zowe artifactory download build',
      defaultValue: 'zowe-install-packaging :: staging',
      trim: true
    ),
    string(
      name: 'ZOWE_CLI_ARTIFACTORY_PATTERN',
      description: 'Zowe artifactory download pattern',
      defaultValue: 'libs-snapshot-local/org/zowe/cli/zowe-cli-package/*/zowe-cli-package-1*.zip',
      trim: true,
      required: true
    ),
    string(
      name: 'ZOWE_CLI_ARTIFACTORY_BUILD',
      description: 'Zowe artifactory download build',
      defaultValue: '',
      trim: true
    ),
    string(
      name: 'EXTENSIONS_LIST',
      description: 'This option will contain the list of extensions that will be tested. Usage: "comp_name_1:comp_url_1,comp_name_2:comp_url_2". Ex: sample_node_api:{url},sample_trial_app:{url}.',
      defaultValue: '',
      trim: true
    ),
    string(
      name: 'ZOWE_DOCKER_ARTIFACTORY_BUILD',
      description: 'Zowe docker artifactory url',
      defaultValue: '',
      trim: true
    ),
    // >>>>>>>> parametters for test cases
    choice(
      name: 'NODE_VERSION',
      choices: ['v12.18.4', 'v8.16.0', 'v8.17.0', 'v12.13.0', 'v12.16.1', 'v14.15.1'],
      description: 'This option is only valid for Marist server and specify node.js version on z/OS side. The installation will set NODE_HOME to /ZOWE/node/node-{{version}}-os390-s390x.',
      trim: true
    ),
    string(
      name: 'CLIENT_NODE_VERSION',
      description: 'Overwrite the default node.js version running in Jenkins agent. Optional, leave it enmpty to use default version. Input value like "v12.18.3" to use a specific version.',
      defaultValue: 'v12.18.3',
      trim: true
    ),
    string(
      name: 'INSTALL_TEST_DEBUG_INFORMATION',
      description: 'How to show debug logging for running install test cases.',
      defaultValue: 'zowe-install-test:*',
      trim: true
    ),
    string(
      name: 'SANITY_TEST_DEBUG_INFORMATION',
      description: 'How to show debug logging for running sanity test cases.',
      defaultValue: 'zowe-sanity-test:*',
      trim: true
    )
  )

  pipeline.setup(
    extraInit: {
      if (!params.STARTED_BY_AUTOMATION) {
        // The purpose of this stage is when you scan the repository, all branches/PRs builds will be
        // kicked off. This stage will pause the pipeline so you have time to cancel the build.
        //
        // NOTE: you have 5 minutes to cancel the build. After 5 minutes, the build will continue to
        //       next stage.
        timeout(time: 5, unit: 'MINUTES') { 
          input message: 'Do you want to continue the pipeline?', ok: "Continue"
        }
      }

      // install specified node.js version onto build agent
      if (params.CLIENT_NODE_VERSION != "") {
        sh "set +x\n. ${NVM_INIT_SCRIPT}\nnvm install ${params.CLIENT_NODE_VERSION}"
      }

      // upgrade npm
      // removed due to incompatible issue, npm@7.5.2 requires node v10
      // npm WARN notsup Unsupported engine for npm@7.5.2: wanted: {"node":">=10"} (current: {"node":"8.17.0","npm":"6.14.11"})
      // npm WARN notsup Not compatible with your version of node/npm: npm@7.5.2
      // nvmShell params.CLIENT_NODE_VERSION, "npm install -g npm"
    }
  )

  pipeline.build(
    operation: {
      ansiColor('xterm') {
        dir(INSTALL_TEST_PATH) {
          nvmShell params.CLIENT_NODE_VERSION, "npm install && npm run build"
        }
        dir(SANITY_TEST_PATH) {
          nvmShell params.CLIENT_NODE_VERSION, "npm install"
        }
      }
    }
  )

  pipeline.createStage(
    name          : "Lint",
    isSkippable   : true,
    stage         : {
      ansiColor('xterm') {
        dir(INSTALL_TEST_PATH) {
          nvmShell params.CLIENT_NODE_VERSION, "npm run lint"
        }
        dir(SANITY_TEST_PATH) {
          nvmShell params.CLIENT_NODE_VERSION, "npm run lint"
        }
      }
    },
    timeout: [time: 2, unit: 'MINUTES']
  )


  pipeline.createStage(
    name          : "Download Zowe",
    isSkippable   : true,
    stage         : {
      pipeline.artifactory.download(
        specContent : """
{
  "files": [{
    "pattern": "${params.ZOWE_ARTIFACTORY_PATTERN}",
    "target": ".tmp/zowe/",
    "flat": "true",
    "build": "${params.ZOWE_ARTIFACTORY_BUILD}"
  }]
}
""",
        expected    : 1
      )

    pipeline.artifactory.download(
        specContent : """
{
  "files": [{
    "pattern": "${params.ZOWE_CLI_ARTIFACTORY_PATTERN}",
    "target": ".tmp/cli/",
    "flat": "true",
    "explode": "true"
  }]
}
""",
        expected    : 1
      )
    },
    timeout: [time: 20, unit: 'MINUTES']
  )

  pipeline.createStage(
    name          : "Install CLI",
    isSkippable   : true,
    stage         : {
      ansiColor('xterm') {
        // install CLI
        nvmShell params.CLIENT_NODE_VERSION, "npm install -g .tmp/cli/zowe-cli*.tgz"
      }
    },
    timeout: [time: 10, unit: 'MINUTES']
  )

  pipeline.test(
    name              : "Test",
    operation         : {
      def serverCredentials = []
      TEST_SERVERS.each{ key, host ->
        def hostKey = host['ansible_host'].replaceAll(/[^A-Za-z0-9]/, '_').toUpperCase()
        serverCredentials.add(usernamePassword(
          credentialsId: host['ssh_hostport'],
          passwordVariable: "${hostKey}_SSH_PORT".toString(),
          usernameVariable: "${hostKey}_SSH_HOST".toString()
        ))
        serverCredentials.add(usernamePassword(
          credentialsId: host['ssh_userpass'],
          passwordVariable: "${hostKey}_SSH_PASSWORD".toString(),
          usernameVariable: "${hostKey}_SSH_USER".toString()
        ))
      }

      def zoweBuildFile = sh(
        script: "ls -1 .tmp/zowe/",
        returnStdout: true
      ).trim()
      def zoweBuild = pwd() + '/.tmp/zowe/' + zoweBuildFile
      // update build description with the zowe build be tested
      currentBuild.description = "${zoweBuildFile} with scope ${params.TEST_SCOPE}".toString()

      def testEnvVars = [
        'ANSIBLE_FORCE_COLOR=true',
        "TEST_SERVER=${TEST_SERVERS[params.TEST_SERVER]['ansible_host']}".toString(),
        "ZOWE_BUILD_LOCAL=${zoweBuild}".toString(),
        "ZOWE_DOCKER_URL=${params.ZOWE_DOCKER_ARTIFACTORY_BUILD}".toString(),
        "EXTENSIONS_LIST=${params.EXTENSIONS_LIST}".toString(),
        "SANITY_TEST_DEBUG=${params.SANITY_TEST_DEBUG_INFORMATION}".toString(),
        "DEBUG=${params.INSTALL_TEST_DEBUG_INFORMATION}".toString(),
        // "ANSIBLE_VERBOSE=-vvv",
      ]

      if (TEST_SERVERS[params.TEST_SERVER].containsKey('node_home_pattern')) {
        testEnvVars.add("ZOS_NODE_HOME=" + TEST_SERVERS[params.TEST_SERVER]['node_home_pattern'].replace('{NODE_VERSION}', params.NODE_VERSION))
      }
      echo "Test environment variables:\n" + testEnvVars.join("\n") + "\n"

      def lockResources = "zowe-install-test-${params.TEST_SERVER}".toString()
      def lockExtraResources = []
      // - jenkins_primary_lock
      // - jenkins_extra_locks
      if (TEST_SCOPES[params.TEST_SCOPE].containsKey('jenkins_primary_lock')) {
        lockResources = "zowe-install-test-${TEST_SCOPES[params.TEST_SCOPE]['jenkins_primary_lock']}".toString()
      }
      if (TEST_SCOPES[params.TEST_SCOPE].containsKey('jenkins_extra_locks')) {
        TEST_SCOPES[params.TEST_SCOPE]['jenkins_extra_locks'].each {
          lockExtraResources.add([resource: "zowe-install-test-${it}".toString()])
        }
      }

      //post a comment on PR to signify that a test is about to run
      if (pipeline.changeInfo.isPullRequest) {
        String prNumberString = "${pipeline.changeInfo.pullRequestId}"
        int prNumber = prNumberString as Integer   // convert to int
        commentText = "Test scope: ${params.TEST_SCOPE}\n"
        commentText += "Test job number: ${env.BUILD_NUMBER}\n"
        commentText += "Test status: <a href=\"${env.BUILD_URL}\">Click me!</a>\n"
        prPostCommentID = pipeline.github.postComment(prNumber, commentText)
      }
      
      lock(resource: lockResources, extra: lockExtraResources) {
        // timestamps {
        dir(INSTALL_TEST_PATH) {
          ansiColor('xterm') {
            withCredentials(serverCredentials) {
              withEnv(testEnvVars) {
                try {
                  nvmShell params.CLIENT_NODE_VERSION, "npm test -- --testPathPattern --detectOpenHandles \"${TEST_SCOPES[params.TEST_SCOPE]['test_files']}\""
                } finally {
                  nvmShell params.CLIENT_NODE_VERSION, "npm run merge-reports"
                }
              } // end of withEnv
            } // end of withCredentials
          } // end of ansiColor
        } // end of dir
        // end of timestamps
      } // end of lock
    }, //operation
    junit         : "${INSTALL_TEST_PATH}/reports/junit.xml",
    htmlReports   : [
      [dir: "${INSTALL_TEST_PATH}/reports", files: "index.html", name: "Report: Test Result"],
    ],
    timeout: [time: 360, unit: 'MINUTES'],
  )

  pipeline.createStage(
    name              : "Update Comment to signify build failure details",
    timeout: [time: 2, unit: 'MINUTES'],
    isSkippable: false,
    resultThreshold: "FAILURE",
    stage : {
      if (prPostCommentID && pipeline.changeInfo.isPullRequest) {
        String prNumberString = "${pipeline.changeInfo.pullRequestId}"
        int prNumber = prNumberString as Integer   // convert to int

        //update comment originally posted on PR, to reflect build status
        withCredentials([usernamePassword(credentialsId: 'jenkins-credential', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
            def command = "curl --globoff -u \"\${USERNAME}:\${PASSWORD}\" -sS -H \"Accept: application/json\" \"${env.BUILD_URL}/testReport/api/json?tree=suites[cases[className,name,age,status]]\""
            def output = sh(script : command, returnStdout: true).trim()
            def jsonOutput = readJSON text: output
            def name
            def status

            def failedTestList = []
            jsonOutput.suites.cases.each { cases ->
            cases.each { eachTest ->
                //overwrite
                name = ""
                status = ""
                eachTest.each { propName, propValue ->
                if (propName == "name") {
                    name = propValue
                }
                if (propName == "status") {
                    status = propValue
                }
                }
                if (status == "FAILED") {
                failedTestList.add(name)
                }
            }
            }
            if (failedTestList) {
            commentText += "<hr>Failed tests are:\n"
            commentText += "<ul>"
            failedTestList.each { String line ->
                commentText += "<li>" + line + "</li>"
            }
            commentText += "</ul>\n"
            } else {
            commentText += "<hr>All tests passed!"
            }
            pipeline.github.updateComment(prNumber, prPostCommentID, commentText)
        }
      }
    }
  )

  pipeline.createStage(
    name          : "API Documentation Check In",
    isSkippable   : true,
    stage         : {
      ansiColor('xterm') {
        if (env.BRANCH_NAME == 'master' && params.TEST_SCOPE == 'generate api documentation') {
          withCredentials([usernamePassword(credentialsId: 'zowe-robot-github', usernameVariable: 'ZOWE_GITHUB_USERID', passwordVariable: 'ZOWE_GITHUB_APIKEY')]) {
            // Set up api_definitions directory in local docs repository
            sh script:'''
                #!/bin/sh
                git clone https://github.com/zowe/docs-site.git
                cd ./docs-site
                git checkout docs-staging

                if [ -d \"./docs/api_definitions\" ]; then rm -rf ./docs/api_definitions; fi
                mv ../api_definitions ./docs
            '''
            
            // Check in api-definitions to docs-staging
            sh "cd ./docs-site && git add ./docs/api_definitions"
            try {
              // Set up config to allow commit to be signed for docs-site repository
              sh "cd ./docs-site && git config user.email \"zowe.robot@gmail.com\" && git config user.name \"zowe-robot\" && git commit -s -m\"Check in api_definitions\""
            } catch (error) {
              echo "Swallowing error in git commit for api_definitions. This is done to avoid build failure when there are no changes to commit." 
            }
            sh "cd ./docs-site && git push https://${ZOWE_GITHUB_USERID}:${ZOWE_GITHUB_APIKEY}@github.com/zowe/docs-site.git"
          }

          // Clean up
          sh "rm -rf docs-site"
        }
      }
    },
    timeout: [time: 10, unit: 'MINUTES']
  )

  pipeline.end()
}
