# TODO - do we need a workflow for keyrings?

# The hostname of the system running API Mediation. If the hostname is
# omitted, the configuration script attempts to calculate the value on 
# its own. You can specify multiple domains separated by comma.
HOSTNAME=
# The IP address of the system running API Mediation. If the IP address 
# is omitted, the configuration script attempts to calculate the value 
# on its own. You can specify multiple IPs separated by comma.
IPADDRESS=
# Should APIML verify certificates of services it uses in strict mode - true/false
# "strict mode" will verify if the certificates is trusted in truststore, also verify
# if the certificate Common Name or Subject Alternate Name (SAN) match the service hostname.
# if this value is true, NONSTRICT_VERIFY_CERTIFICATES will be ignored.
VERIFY_CERTIFICATES=true
# Should APIML verify certificates of services it uses in non-strict mode - true/false
# "non-strict mode" will verify if the certificates is trusted in truststore, but
# certificate Common Name or Subject Alternate Name (SAN) will NOT be checked.
NONSTRICT_VERIFY_CERTIFICATES=true

# If APIML SSO token not present, Zowe components are allowed to attempt authentication with other user-provided data
SSO_FALLBACK_TO_NATIVE_AUTH=true


# Location for generated certificates
KEYSTORE_DIRECTORY=/global/zowe/keystore
# This variable has to be set to the LOCALCA variable's value specified in the JCL.
ZOWE_LOCALCA_LABEL=localca
# This variable has to be set to the Zowe certificate's LABEL specified in the JCL.
ZOWE_CERTIFICATE_LABEL=localhost
# Specify zowe user id to set up ownership of the generated certificates.
# Set the variable to the same user id as in the jcl.
ZOWE_USER_ID=ZWESVUSR
# Specify zowe keyring that keeps zowe certificates, set
# the variable to the same keyring that you used in the jcl.
ZOWE_KEYRING=ZoweKeyring
# Option to generate certificates in zowe-setup-certificates, rather than ZWEKRING jcl
# If ZWEKRING is used then set this variable to false (defaults to false)
GENERATE_CERTS_FOR_KEYRING=false

# Optional - you can generate dedicated certificate for each of the components or your extensions. Component-level
# certificates will be put into same keystore with aliases/labels you defined.
# The component-level certificates can be used to authenticate against Caching Service, and this is recommended how to
# configure your instance in High Availalibity deployment. To use component-level certificates, using YAML configuration
# format is required.
# To generate component-level certificates, you can uncomment and modify the below line:
# COMPONENT_LEVEL_CERTIFICATES=gateway,app-server,zss
# If you are using external certificate for the component, please define these 2 variables in a format of
# <component>:<value>,<another-component>:<another-value>
# optional - Path to a PKCS12 keystore with a server certificate for component
# For example: gateway:/path/to/my/external/certificate/keystore.p12,app-server:/path/to/my/external/certificate/keystore.p12
# EXTERNAL_COMPONENT_CERTIFICATES=
# optional - Alias of the component certificate in the keystore. 
# For example: gateway:alias-of-gateway,app-server:alias-of-app-server
# EXTERNAL_COMPONENT_CERTIFICATE_ALIASES=
