---
# ============================================================================
- name: Locate Zowe SMPE PTF files
  # this should set zowe_smpe_ptf if succeeds
  import_role:
    name: ptf
    tasks_from: locate_ptf_on_server

# ============================================================================
# validate variables
- import_role:
    name: common
    tasks_from: validate_variables
  vars:
    variable_list:
    - zowe_smpe_dir_prefix
    - zowe_smpe_hlq_dsn
    - zowe_smpe_hlq_csi
    - zowe_smpe_fmid
    - zowe_smpe_ptf
    # it's possible we only have 1 PTF
    # - zowe_smpe_ptf_2

- name: Prepare extracted and tmp folders
  raw: >-
    rm -fr "{{ work_dir_remote }}/tmp" && \
    mkdir -p "{{ work_dir_remote }}/tmp" && \
    chmod 777 "{{ work_dir_remote }}/tmp" && \
    rm -fr "{{ work_dir_remote }}/extracted" && \
    mkdir -p "{{ work_dir_remote }}/extracted"

# ============================================================================
# Generate JCLs used to install PTF
- name: Copy job card to local tmp folder
  copy:
    src: "{{ item }}"
    dest: "{{ work_dir_local }}/{{ inventory_hostname }}/"
  delegate_to: localhost
  loop:
  - "jcl/jobcard.jcl"
  - "scripts/smpe-prepare-jcls.sh"

- name: Generate PTF install JCLs
  delegate_to: localhost
  shell:
    cmd: chmod +x smpe-prepare-jcls.sh && ./smpe-prepare-jcls.sh -i "{{ zowe_smpe_ptf_readme }}" -j ./
    chdir: "{{ work_dir_local }}/{{ inventory_hostname }}"

- name: List JCLs created
  delegate_to: localhost
  shell:
    cmd: ls -l *.jcl
    chdir: "{{ work_dir_local }}/{{ inventory_hostname }}"

# ============================================================================
# Upload JCLs to remote work space
- name: Upload PTF installation JCLs
  include_role:
    name: common
    tasks_from: upload_file
  vars:
    filename_to_upload: "{{ item }}.jcl"
    file_upload_method: scp
    file_upload_hashcheck: false
  loop: "{{ zowe_ptf_install_jcls }}"

# ============================================================================
# Convert uploaded JCLs in remote workspace if necessary
- name: (Optional) convert PTF installation JCLs
  vars:
    filename: "{{ item }}.jcl"
  loop: "{{ zowe_ptf_install_jcls }}"
  when: convert_upload|default(False)
  raw: iconv -f ISO8859-1 -t IBM-1047 "{{ work_dir_remote }}/{{ filename }}" > "{{ work_dir_remote }}/{{ filename }}.ebcdic" && mv  "{{ work_dir_remote }}/{{ filename }}.ebcdic"  "{{ work_dir_remote }}/{{ filename }}"



- name: Fix JCLs is we only have 1 PTF
  when: zowe_smpe_ptf_2 == ""
  block:
  - name: Fix Z1ALLOC
    raw: >-
      cat "{{ work_dir_remote }}/Z1ALLOC.jcl" | \
      sed -e '/TMP0002/{N;N;N;N;N;N;N;N;d;}' | \
      sed -e '/sysmod2/d' \
      > "{{ work_dir_remote }}/Z1ALLOC.jcl.tmp" && \
      mv "{{ work_dir_remote }}/Z1ALLOC.jcl.tmp" "{{ work_dir_remote }}/Z1ALLOC.jcl"
  - name: Fix Z3RECEIV
    raw: >-
      cat "{{ work_dir_remote }}/Z3RECEIV.jcl" | \
      sed -e '/sysmod2/d' | \
      sed -e '/SYSMOD2/d' \
      > "{{ work_dir_remote }}/Z3RECEIV.jcl.tmp" && \
      mv "{{ work_dir_remote }}/Z3RECEIV.jcl.tmp" "{{ work_dir_remote }}/Z3RECEIV.jcl"
  - name: Fix Z4APPLY
    raw: >-
      cat "{{ work_dir_remote }}/Z4APPLY.jcl" | \
      sed -e '/sysmod2/d' \
      > "{{ work_dir_remote }}/Z4APPLY.jcl.tmp" && \
      mv "{{ work_dir_remote }}/Z4APPLY.jcl.tmp" "{{ work_dir_remote }}/Z4APPLY.jcl"
  - name: Fix Z6REST
    raw: >-
      cat "{{ work_dir_remote }}/Z6REST.jcl" | \
      sed -e '/sysmod2/d' \
      > "{{ work_dir_remote }}/Z6REST.jcl.tmp" && \
      mv "{{ work_dir_remote }}/Z6REST.jcl.tmp" "{{ work_dir_remote }}/Z6REST.jcl"
  - name: Fix Z8DEALOC
    raw: >-
      cat "{{ work_dir_remote }}/Z8DEALOC.jcl" | \
      sed -e '/TMP0002/{N;N;d;}' | \
      sed -e '/sysmod2/d' \
      > "{{ work_dir_remote }}/Z8DEALOC.jcl.tmp" && \
      mv "{{ work_dir_remote }}/Z8DEALOC.jcl.tmp" "{{ work_dir_remote }}/Z8DEALOC.jcl"

# ============================================================================
# is the PTF already installed?
- import_role:
    name: ptf
    tasks_from: is_ptf_installed
  vars:
    smpe_csi: "{{ zowe_smpe_hlq_csi }}.CSI"
    # we hardcoded TZONE name
    smpe_tzone: TZONE
    smpe_fmid: "{{ zowe_smpe_fmid }}"
    ptfs:
    - "{{ zowe_smpe_ptf }}"

- name: Overwrite PTF install steps if PTF is already installed
  set_fact:
    zowe_smpe_ptf_install_steps: "{{ zowe_smpe_ptf_overwrite_steps }}"
  when: ptfs_existence[zowe_smpe_ptf]

# ============================================================================
# Run install-SMPE-SYSMOD.sh to install Zowe SMPE FMID
- name: Prepare install-SMPE-SYSMOD.sh
  template:
    src: install-SMPE-SYSMOD.sh.j2
    dest: "{{ work_dir_local }}/{{ inventory_hostname }}/install-SMPE-SYSMOD.sh"
    newline_sequence: '\n'
    mode: 0700
  delegate_to: localhost

#- import_role:
#    name: zos
#    tasks_from: upload_and_run_script
#  vars:
#    upload_and_run_script_filename: install-SMPE-SYSMOD.sh
#    upload_and_run_script_parameters: "\"{{ zowe_smpe_hlq_dsn }}\" \"{{ zowe_smpe_hlq_csi }}\" \"{{ (zowe_smpe_dir_prefix is regex(\"/$\")) | ternary(zowe_smpe_dir_prefix, zowe_smpe_dir_prefix + \"/\") }}\" \"{{ work_dir_remote }}\" \"{{ zowe_smpe_fmid }}\" \"{{ zowe_smpe_ptf }}\" \"{{ zowe_smpe_ptf_2 }}\" \"{{ zowe_smpe_volser }}\" install"

- name: Check if the first PTF is installed properly
  block:
  - import_role:
      name: ptf
      tasks_from: is_ptf_installed
    vars:
      smpe_csi: "{{ zowe_smpe_hlq_csi }}.CSI"
      # we hardcoded TZONE name
      smpe_tzone: TZONE
      smpe_fmid: "{{ zowe_smpe_fmid }}"
      ptfs:
      - "{{ zowe_smpe_ptf }}"
  - name: Validate if the first PTF are installed properly
    fail:
      msg: "PTF {{ item }} is not installed"
    when: not ptfs_existence[item]
    loop: 
    - "{{ zowe_smpe_ptf }}"

- name: Check if the second PTF is installed properly
  when: zowe_smpe_ptf_2 != ""
  block:
  - import_role:
      name: ptf
      tasks_from: is_ptf_installed
    vars:
      smpe_csi: "{{ zowe_smpe_hlq_csi }}.CSI"
      # we hardcoded TZONE name
      smpe_tzone: TZONE
      smpe_fmid: "{{ zowe_smpe_fmid }}"
      ptfs:
      - "{{ zowe_smpe_ptf_2 }}"
  - name: Validate if the second PTF is installed properly
    fail:
      msg: "PTF {{ item }} is not installed"
    when: not ptfs_existence[item]
    loop: 
    - "{{ zowe_smpe_ptf_2 }}"
