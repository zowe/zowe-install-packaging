---
# This playbook performs regular configuration after Zowe is installed.

# ============================================================================
- import_role:
    name: common
    tasks_from: validate_variables
  vars:
    variable_list:
    - work_dir_remote
    - zowe_root_dir
    - zowe_instance_dir
    - zowe_keystore_dir
    - zowe_install_logs_dir
    - zowe_dataset_prefix
    - zowe_jcllib
    - zowe_proclib_dsname
    - zowe_proclib_membername
    - zowe_runtime_group
    - zowe_runtime_user
    - zowe_xmem_proclib
    - zowe_xmem_parmlib
    # optional
    # - zowe_xmem_loadlib
    - zowe_xmem_pluginlib
    - zowe_xmem_proclib_member_zss
    - zowe_xmem_proclib_member_aux
    - zowe_xmem_stc_user
    - zowe_job_prefix
    - zowe_instance_id
    - zowe_apiml_catalog_port
    - zowe_apiml_discovery_port
    - zowe_apiml_gateway_port
    - zowe_apiml_gateway_timeout_millis
    - zowe_apiml_security_x509_enabled
    - zowe_apiml_security_zosmf_applid
    - zowe_apiml_security_auth_provider
    - zowe_jobs_api_port
    - zowe_mvs_api_port
    - zowe_jobs_explorer_port
    - zowe_mvs_explorer_port
    - zowe_uss_explorer_port
    - zowe_zlux_port
    - zowe_zss_port
    - zowe_zss_xmem_name
    - zowe_zlux_terminal_ssh_port
    - zowe_zlux_terminal_telnet_port
    - zos_security_system
    - zowe_lock_keystore
- name: Show value of zowe_root_dir
  debug:
    msg: zowe_root_dir is {{ zowe_root_dir }}

# ============================================================================
- name: Detect PROCLIB automatically
  when: zowe_proclib_dsname == "auto"
  block:
  - name: Get PROCLIB concatenation
    import_role:
      name: zos
      tasks_from: opercmd
    vars:
      opercmd: "$D PROCLIB"
  - name: Find the first proclib
    set_fact:
      zowe_proclib_dsname: "{{ opercmd_result.stdout | regex_search(qry, '\\1') | first }}"
    vars:
      qry: \$HASP319 +DD\(1\)=\(DSNAME=(.+),

# ============================================================================
- name: Test convenience build install folder
  raw: test -f "{{ zowe_instance_dir }}/zowe.yaml"
  register: zowe_yaml_exists
  ignore_errors: True

- name: Initialize zowe.yaml
  raw: >-
    mkdir -p "{{ zowe_instance_dir }}" && \
    chmod 777 "{{ zowe_instance_dir }}" && \
    cp "{{ zowe_root_dir }}/example-zowe.yaml" "{{ zowe_instance_dir }}/zowe.yaml"
  when: zowe_yaml_exists.rc != 0

- name: Update zowe.yaml zowe.setup.dataset
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.dataset.prefix": "{{ zowe_dataset_prefix }}"
      "zowe.setup.dataset.proclib": "{{ zowe_proclib_dsname }}"
      "zowe.setup.dataset.parmlib": "{{ zowe_xmem_parmlib }}"
      "zowe.setup.dataset.jcllib": "{{ zowe_jcllib }}"
      "zowe.setup.dataset.authLoadlib": "{{ zowe_xmem_loadlib }}"
      "zowe.setup.dataset.authPluginLib": "{{ zowe_xmem_pluginlib }}"

- name: Update zowe.yaml zowe.setup.security
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.security.product": "{{ zos_security_system }}"
      "zowe.setup.security.groups.admin": "{{ zowe_runtime_group }}"
      "zowe.setup.security.groups.stc": "{{ zowe_xmem_stc_group }}"
      "zowe.setup.security.groups.sysProg": "{{ zowe_runtime_group }}"
      "zowe.setup.security.users.zowe": "{{ zowe_runtime_user }}"
      "zowe.setup.security.users.zis": "{{ zowe_xmem_stc_user }}"
      "zowe.setup.security.stcs.zowe": "{{ zowe_proclib_membername }}"
      "zowe.setup.security.stcs.zis": "{{ zowe_xmem_proclib_member_zss }}"
      "zowe.setup.security.stcs.aux": "{{ zowe_xmem_proclib_member_aux }}"

- name: Update zowe.yaml zowe.setup.certificate with PKCS12 keystore
  when: zos_keystore_mode is undefined or zos_keystore_mode != 'KEYSTORE_MODE_KEYRING'
  block:
  - name: Delete keyring certificate setup
    import_role:
      name: zos
      tasks_from: delete_zowe_yaml
    vars:
      configs:
      - zowe.setup.certificate.keyring
  - name: Update common PKCS12 setup
    import_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        "zowe.setup.certificate.type": "PKCS12"
        "zowe.setup.certificate.pkcs12.directory": "{{ zowe_keystore_dir }}"
        "zowe.setup.certificate.pkcs12.lock": "{{ zowe_lock_keystore|string|lower }}"
        "zowe.setup.certificate.pkcs12.name": "{{ zowe_keystore_alias }}"
        "zowe.setup.certificate.pkcs12.password": "{{ zowe_keystore_password }}"
        "zowe.setup.certificate.importCertificateAuthorities.0": "{{ zowe_external_certficate_authorities }}"
  - name: Update PKCS12 setup when importing from external keystore
    when: zowe_external_certficate is not none and zowe_external_certficate != ''
    import_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        "zowe.setup.certificate.pkcs12.import.keystore": "{{ zowe_external_certficate }}"
        "zowe.setup.certificate.pkcs12.import.password": "{{ zowe_keystore_password }}"
        "zowe.setup.certificate.pkcs12.import.alias": "{{ zowe_external_certficate_alias }}"

- name: Update zowe.yaml zowe.setup.certificate with z/OS keyring
  when: zos_keystore_mode is defined and zos_keystore_mode == 'KEYSTORE_MODE_KEYRING'
  block:
  - name: Delete PKCS12 certificate setup
    import_role:
      name: zos
      tasks_from: delete_zowe_yaml
    vars:
      configs:
      - zowe.setup.certificate.pkcs12
  - name: Update common keyring setup
    import_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        "zowe.setup.certificate.type": "JCERACFKS"
        "zowe.setup.certificate.keyring.name": "{{ zowe_keyring_alias }}"
        "zowe.setup.certificate.keyring.label": "{{ zowe_keyring_certname }}"
        "zowe.setup.certificate.importCertificateAuthorities.0": "{{ zowe_external_certficate_authorities }},{{ zowe_keyring_external_intermediate_ca }},{{ zowe_keyring_external_root_ca }}"
  - name: Update keyring setup when connecting to external certificate
    when: zowe_external_certficate is not none and zowe_external_certficate != ''
    import_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        # FIXME: import or connect?
        "zowe.setup.certificate.keyring.connect.user": "{{ zowe_external_certficate }}"
        "zowe.setup.certificate.keyring.connect.label": "{{ zowe_external_certficate_alias }}"
        "zowe.setup.certificate.keyring.import.dsName": "{{ zowe_external_certficate }}"
        "zowe.setup.certificate.keyring.import.password": "{{ zowe_external_certficate_alias }}"
  - name: Update keyring setup to help import z/OSMF CA
    import_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        "zowe.setup.certificate.keyring.zOSMF.ca": "{{ zos_zosmf_ca }}"
        "zowe.setup.certificate.keyring.zOSMF.user": "{{ zos_zosmf_user }}"

- name: Update zowe.yaml zowe.verifyCertificates to STRICT
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.verifyCertificates": "STRICT"
  when: zowe_apiml_verify_certficates_of_services and zowe_apiml_nonstrict_verify_certficates_of_services

- name: Update zowe.yaml zowe.verifyCertificates to NONSTRICT
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.verifyCertificates": "NONSTRICT"
  when: not zowe_apiml_verify_certficates_of_services and zowe_apiml_nonstrict_verify_certficates_of_services

- name: Update zowe.yaml zowe.verifyCertificates to DISABLED
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.verifyCertificates": "DISABLED"
  when: not zowe_apiml_verify_certficates_of_services and not zowe_apiml_nonstrict_verify_certficates_of_services

- name: Update zowe.yaml zowe.setup.vsam
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.vsam.volume": "{{ zowe_caching_vsam_volume }}"
      "zowe.setup.vsam.storageClass": "{{ zowe_caching_vsam_storage_class }}"
      "components.caching-service.storage.mode": "{{ zowe_caching_service_persistent }}"
      "components.caching-service.storage.vsam.name": "{{ zowe_dataset_prefix }}.{{ zowe_caching_service_vsam_dsprefix }}{{ zowe_instance_id }}"

- name: Update zowe.yaml zowe.setup.vsam.mode to NONRLS
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.vsam.mode": "NONRLS"
  when: not zos_vsam_rls

- name: Update zowe.yaml zowe.setup.vsam.mode to RLS
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.setup.vsam.mode": "RLS"
  when: zos_vsam_rls

- name: Update zowe.yaml runtime configs
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.runtimeDirectory": "{{ zowe_root_dir }}"
      "zowe.logDirectory": "{{ zowe_instance_dir }}/logs"
      "zowe.workspaceDirectory": "{{ zowe_instance_dir }}/workspace"
      "zowe.extensionDirectory": "{{ zowe_extension_dir }}"
      "zowe.job.name": "{{ zowe_job_prefix }}{{ zowe_instance_id }}SV"
      "zowe.job.prefix": "{{ zowe_job_prefix }}{{ zowe_instance_id }}"
      # FIXME: multiplpe domains?
      "zowe.externalDomains.0": "{{ zowe_external_domain_name }}"
      "zowe.externalPort": "{{ zowe_apiml_gateway_port }}"
      "zowe.launchScript.logLevel": "{{ zowe_launch_scripts_loglevel }}"
      "java.home": "{{ zos_java_home }}"
      "node.home": "{{ zos_node_home }}"
      "zOSMF.host": "{{ zos_zosmf_host }}"
      "zOSMF.port": "{{ zos_zosmf_port }}"
      "zOSMF.applId": "{{ zowe_apiml_security_zosmf_applid }}"

- name: Update zowe.yaml runtime configs if IP is defined
  when: zowe_external_ip_address is not none and zowe_external_ip_address != ''
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "zowe.externalDomains.1": "{{ zowe_external_ip_address }}"

- name: Update zowe.yaml components configs
  import_role:
    name: zos
    tasks_from: update_zowe_yaml
  vars:
    configs:
      "components.gateway.port": "{{ zowe_apiml_gateway_port }}"
      "components.metrics-service.port": "{{ zowe_apiml_metrics_service_port }}"
      "components.api-catalog.port": "{{ zowe_apiml_catalog_port }}"
      "components.discovery.port": "{{ zowe_apiml_discovery_port }}"
      "components.caching-service.port": "{{ zowe_caching_service_port }}"
      "components.app-server.port": "{{ zowe_zlux_port }}"
      "components.zss.port": "{{ zowe_zss_port }}"
      "components.jobs-api.port": "{{ zowe_jobs_api_port }}"
      "components.files-api.port": "{{ zowe_mvs_api_port }}"
      # other gateway configs
      "components.gateway.apiml.gateway.timeoutMillis": "{{ zowe_apiml_gateway_timeout_millis }}"
      "components.gateway.apiml.security.x509.enabled": "{{ zowe_apiml_security_x509_enabled|string|lower }}"
      "components.gateway.apiml.security.auth.provider": "{{ zowe_apiml_security_auth_provider|string|lower }}"
      "components.gateway.apiml.security.auth.zosmf.jwtAutoconfiguration": "{{ zowe_apiml_security_zosmf_jwt_autoconfiguration_mode }}"
      # desktop customizations
      "zowe.environments.ZWED_SSH_PORT": "{{ zowe_zlux_terminal_ssh_port }}"
      "zowe.environments.ZWED_TN3270_PORT": "{{ zowe_zlux_terminal_telnet_port }}"
      # "zowe.environments.ZWED_TN3270_SECURITY": "{{ zowe_zlux_terminal_telnet_security_type }}"
      # FIXME: uncertain configs
      # sed -e "s+^ZWES_XMEM_SERVER_NAME=.*\$+ZWES_XMEM_SERVER_NAME={{ zowe_zss_xmem_name }}+" | \

- name: Update zowe.yaml components enable status
  when: zowe_launch_components != '' and zowe_launch_components is not none
  block:
  - name: Disable all components if zowe_launch_components is defined
    include_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        "components.{{ item }}.enabled": "false"
    with_items: "{{ zowe_core_components }}"
  - name: Update zowe.yaml components enable status
    include_role:
      name: zos
      tasks_from: update_zowe_yaml
    vars:
      configs:
        "components.{{ item }}.enabled": "true"
    with_items: "{{ zowe_launch_components.split(',') }}"

# ============================================================================
- name: Show zowe.yaml before zwe init
  raw: cat "{{ zowe_instance_dir }}/zowe.yaml" | grep -v '^ *#' | sed '/^[[:space:]]*$/d'

# ============================================================================
- name: Set zwe_init_params variables
  set_fact:
    zwe_init_params: "--update-config -l \"{{ zowe_install_logs_dir }}\""

- name: Set --security-dry-run or not
  set_fact:
    zwe_init_params: "{{ zwe_init_params }} --security-dry-run"
  when: zowe_configure_security_dry_run

- name: Set --ignore-security-failures or not
  set_fact:
    zwe_init_params: "{{ zwe_init_params }} --ignore-security-failures"
  when: zowe_configure_ignore_security_failures

# ============================================================================
- name: Init Zowe
  import_role:
    name: zos
    tasks_from: run_zwe
  vars:
    parameters: "init {{ zwe_init_params }}"
