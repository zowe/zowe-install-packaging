---
# this playbook runs SZWESAMP(ZWEKRING)

- name: Validate that we were in keyring mode
  fail:
    msg: "Error. This play should only be run when in keyring mode"
  when: zos_keystore_mode is undefined or zos_keystore_mode != 'KEYSTORE_MODE_KEYRING'

- name: Remove ZWEKRING.jcl if exists
  raw: >-
    rm -f "{{ work_dir_remote }}/ZWEKRING.jcl"
    rm -f "{{ work_dir_remote }}/ZWEKRING.raw.jcl"

- name: Copy SZWESAMP(ZWEKRING) to USS
  raw: cp "//'{{ zowe_dataset_prefix }}.SZWESAMP(ZWEKRING)'" "{{ work_dir_remote }}/ZWEKRING.raw.jcl"

- name: Set ip address
  raw: dig +short $(hostname) | sed -n 2p
  when: zowe_external_ip_address is undefined or zowe_external_ip_address is none or zowe_external_ip_address|length == 0
  register: zowe_external_ip_address_output

- set_fact:
    zowe_external_ip_address: "{{ zowe_external_ip_address_output.stdout | trim}}"
  when: zowe_external_ip_address is undefined or zowe_external_ip_address is none or zowe_external_ip_address|length == 0
  
- name: Show ip zowe_external_ip_address
  debug:
    var: zowe_external_ip_address

- name: Automatically detect zos_zosmf_ca
  when: zos_zosmf_ca is undefined or zos_zosmf_ca is none or zos_zosmf_ca|length == 0
  block:
  - name: Get z/OSMF keyring for RACF
    # this only works for RACF
    raw: tsocmd 'RACDCERT LIST ID({{ zos_zosmf_user }})' 2>&1 | grep -v RACDCERT | awk "/Ring:/{x=NR+10;next}(NR<=x){print}" | awk '{print $1}' | sed -e 's/^>//' -e 's/<$//' | tr -d '\n'
    ignore_errors: True
    register: zosmf_keyring_output
  - name: Show zosmf_keyring_output
    debug:
      var: zosmf_keyring_output.stdout

  - name: Get z/OSMF CA
    # this only works for RACF
    raw: tsocmd 'RACDCERT LISTRING({{ zosmf_keyring_output.stdout }}) ID({{ zos_zosmf_user }})' 2>&1 | grep -v RACDCERT | grep 'CERTAUTH' | head -n 1 | awk '{print $1}' | tr -d '\n'
    ignore_errors: True
    register: zosmf_ca_output
  - name: Update zos_zosmf_ca
    set_fact:
      zos_zosmf_ca: "{{ zosmf_ca_output.stdout }}"

- name: Show z/OSMF CA
  debug:
    var: zos_zosmf_ca
- name: Check value of zos_zosmf_ca
  fail:
    msg: "To successfully verify certificates, zos_zosmf_ca is required"
  when: (zowe_apiml_verify_certficates_of_services or zowe_apiml_nonstrict_verify_certficates_of_services) and (zos_zosmf_ca is undefined or zos_zosmf_ca is none or zos_zosmf_ca|length == 0)

- name: Update ZWEKRING.jcl with configurations
  raw: >-
    cat "{{ work_dir_remote }}/ZWEKRING.raw.jcl" | \
    sed -e "s%SET  PRODUCT=RACF%SET PRODUCT={{ zos_security_system }}%" | \
    sed -e "s%SET HOSTNAME=''%SET HOSTNAME='{{ zowe_zos_host }}'%" | \
    sed -e "s%SET IPADDRES=''%SET IPADDRES='{{ zowe_external_ip_address }}'%" | \
    sed -e "s%SET LABEL='localhost'%SET LABEL='{{ zowe_keyring_certname }}'%" \
    > "{{ work_dir_remote }}/ZWEKRING.jcl"

- name: Update ZWEKRING.jcl IFZOWECA with configurations
  when: zowe_keyring_external_intermediate_ca is not none or zowe_keyring_external_root_ca is not none
  raw: >-
    cat "{{ work_dir_remote }}/ZWEKRING.jcl" | \
    sed -e "s%SET IFZOWECA=0%SET IFZOWECA=1%" | \
    sed -e "s%SET ITRMZWCA=''%SET ITRMZWCA='{{ zowe_keyring_external_intermediate_ca }}'%" | \
    sed -e "s%SET ROOTZWCA=''%SET ROOTZWCA='{{ zowe_keyring_external_root_ca }}'%" \
    > "{{ work_dir_remote }}/ZWEKRING.jcl"

- name: Update ZWEKRING.jcl IFROZFCA with configurations
  when: zos_zosmf_ca is not none
  raw: >-
    cat "{{ work_dir_remote }}/ZWEKRING.jcl" | \
    sed -e "s%SET IFROZFCA=0%SET IFROZFCA=1%" | \
    sed -e "s%SET ROOTZFCA=''%SET ROOTZFCA='{{ zos_zosmf_ca }}'%" \
    > "{{ work_dir_remote }}/ZWEKRING.jcl"

- name: Check ZWEKRING.jcl changes
  raw: >-
    grep -e "^// *SET " \
        -e PRODUCT \
        -e HOSTNAME \
        -e IPADDRES \
        -e LABEL \
        -e IFZOWECA -e ITRMZWCA -e ROOTZWCA \
        -e IFROZFCA -e ROOTZFCA \
        "{{ work_dir_remote }}/ZWEKRING.jcl"

- name: Run ZWEKRING.jcl
  import_role:
    name: zos
    tasks_from: run_jcl
  vars:
    jcl_filename: "{{ work_dir_remote }}/ZWEKRING.jcl"
