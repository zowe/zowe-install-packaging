<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
<autoTakeOwnership>true</autoTakeOwnership>
<!-- instance prefix settings -->
    <workflowInfo>
        <workflowID scope="none" >configure_xmem</workflowID>
        <workflowDefaultName>Configure Cross Memory Server</workflowDefaultName>
        <workflowDescription>This workflow is used to configure the Cross Memory Server</workflowDescription>
        <workflowVersion>#ZOWE_VERSION#</workflowVersion>
        <vendor>ZOWE</vendor>
        <General/>
    </workflowInfo>
    <variable name="zowe_install_path" scope="instance" visibility="public">
        <label>Install Path</label>
        <abstract>Path for the Zowe runtime installation</abstract>
        <description>Specify the path that was used for the ZOWE runtime installation</description>
        <category>Installation</category>
        <string valueMustBeChoice="false" multiLine="false">
            <regularExpression>~?(\/[^\/]+)+</regularExpression>
            <errorMessage>Specify proper full USS path ending without a trailing slash.</errorMessage>
        </string>
    </variable>
    <variable name="zowe_dsn_prefix" scope="instance" visibility="public">
        <label>Zowe Data Set Prefix</label>
        <abstract>Data Set HLQ for the Zowe runtime installation</abstract>
        <description>Specify the data set high level qualifier that was used for the Zowe runtime installation</description>
        <category>Installation</category>
        <string valueMustBeChoice="false" multiLine="false">
            <validationType>DSNAME</validationType>
        </string>
    </variable>
    <variable name="xmem_volume" scope="instance" visibility="public">
        <label>Cross Memory Server Volume</label>
        <abstract>Fill in the VOLUME for the data sets</abstract>
        <description>Use this variable to fill in the VOLUME used for the data set creation (if needed)</description>
        <category>DASD</category>
        <string valueMustBeChoice="false" multiLine="false">
            <validationType>VOLSER</validationType>
        </string>
    </variable>
    <variable name="xmem_storclas" scope="instance" visibility="public">
        <label>Cross Memory Server Storage Class</label>
        <abstract>Fill in the Storage Class for SMS managed PDS</abstract>
        <description>Fill in the Storage Class for SMS managed PDS (if needed)</description>
        <category>DASD</category>
        <string valueMustBeChoice="false" multiLine="false">
            <validationType>DSMEMBERNAME</validationType>
        </string>
    </variable>
    <variable name="proclib" scope="instance" visibility="public">
        <label>Procedure Library</label>
        <abstract>Specify the procedure library for the started task</abstract>
        <description>Specify the PROCLIB data set name that will be used to store the customized Cross Memory Server STC JCL</description>
        <category>Installation</category>
        <string valueMustBeChoice="false" multiLine="false">
            <validationType>DSNAME</validationType>
        </string>
    </variable>
    <variable name="temp_folder" scope="instance" visibility="public">
        <label>Temporary Folder</label>
        <abstract>USS folder used to store temporary data</abstract>
        <description>This folder will be used to store data required for the workflow execution</description>
        <category>Installation</category>
        <string valueMustBeChoice="false" multiLine="false">
            <regularExpression>\/([^\/ ]+\/)+</regularExpression>
            <errorMessage>USS folder path should start and end with slash.</errorMessage>
            <!-- Specify choices here -->
            <default>/tmp/</default>
        </string>
    </variable>
    <!--atCreate-->
    <step name="define_variables" optional="false">
        <title>Define Variables</title>
        <description>Define the variable values for the execution</description>
        <!-- pre-requisite step -->
        <variableValue name="zowe_install_path" scope="instance" noPromptIfSet="false" required="true"/>
        <variableValue name="zowe_dsn_prefix" scope="instance" noPromptIfSet="false" required="true"/>
        <variableValue name="xmem_volume" scope="instance" noPromptIfSet="false" required="false"/>
        <variableValue name="xmem_storclas" scope="instance" noPromptIfSet="false" required="false"/>
        <variableValue name="proclib" scope="instance" noPromptIfSet="false" required="true"/>
        <variableValue name="temp_folder" scope="instance" noPromptIfSet="false" required="false"/>
        <!-- condition -->
        <instructions substitution="false">Run this step to define the variables for the workflow execution.</instructions>
        <weight>1</weight>
        <skills>None</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <!--template-->
    </step>
    <step name="allocate_xmem" optional="false">
        <title>Allocate Cross Memory Server Data Sets</title>
        <description>Allocates the data sets for the Cross Memory Server.</description>
        <prereqStep name="define_variables"/>
        <!--variableValues-->
        <!-- condition -->
        <instructions substitution="false">Use this step to allocate the data sets required for Cross Memory Server</instructions>
        <weight>1</weight>
        <skills>z/OS System Programmer</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <template>
            <inlineTemplate substitution="true">//ALLOCDSS EXEC PGM=IEFBR14
//LOADLIB1 DD DISP=SHR,
//    DSN=${instance-zowe_dsn_prefix}.SZWEAUTH
//PARMLIB1 DD DISP=(MOD,CATLG,DELETE),
//    DSN=${instance-zowe_dsn_prefix}.PARMLIB,
//    DCB=(LRECL=80,RECFM=FB),SPACE=(TRK,(5,5,5)),
#if(${instance-xmem_volume} and $!{instance-xmem_volume} != "")
//    VOL=SER=${instance-xmem_volume},
#end
#if(${instance-xmem_storclas} and $!{instance-xmem_storclas} != "")
//    STORCLAS=${instance-xmem_storclas},
#end
//    UNIT=SYSALLDA</inlineTemplate>
            <submitAs maxRc="0">JCL</submitAs>
            <maxLrecl>1024</maxLrecl>
            <!-- zosmfOutput -->
        </template>
    </step>
    <step name="copy_artifacts" optional="false">
        <title>Copy artifacts</title>
        <description>Copies the necessary artifacts (load modules, parmlib members, etc). Also copies the STC to the proclib.</description>
        <prereqStep name="allocate_xmem"/>
        <!--variableValues-->
        <!-- condition -->
        <instructions substitution="false"><![CDATA[<p>Run this step to execute zowe-install-xmem.sh script with pre-set input values.<br/>
<p>More info about used zowe-install-xmem.sh script is under this documentation link <a href="https://docs.zowe.org/stable/user-guide/scripted-configure-server">zowe-install-xmem.sh script</a> (open the link via right-click in new window or tab).</p>]]></instructions>
        <weight>1</weight>
        <skills>z/OS System Programmer</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <template>
            <inlineTemplate substitution="true">set -x

cd "${instance-zowe_install_path}/scripts/utils"
sh zowe-install-xmem.sh -d "${instance-zowe_dsn_prefix}" -a "${instance-zowe_dsn_prefix}.PARMLIB" -r "${instance-proclib}"
exit $?</inlineTemplate>
            <submitAs maxRc="0">shell-JCL</submitAs>
            <maxLrecl>1024</maxLrecl>
            <!-- zosmfOutput -->
        </template>
    </step>
    <step name="ppt_entries" optional="false">
        <title>Add PPT entries to the system PARMLIB</title>
        <description>Follow the instructions to add the PTT entries to the system parmlib</description>
        <prereqStep name="copy_artifacts"/>
        <!-- condition -->
        <!--variableValues-->
        <instructions substitution="false"><![CDATA[<p>The cross memory server and its auxiliary address spaces must run in key 4 and be non-swappable. For the server to start in this environment, add the following PPT entries for the server and address spaces to the SCHEDxx member of the system PARMLIB.</p> <div class="language- extra-class"><pre class="language-text"><code>PPT PGMNAME(ZWESIS01) KEY(4) NOSWAP
</code></pre></div><div class="language- extra-class"><pre class="language-text"><code>PPT PGMNAME(ZWESAUX) KEY(4) NOSWAP
</code></pre></div><p>The PDS member <code>SZWESAMP(ZWESISCH)</code> contains the PPT lines for reference.</p> <p>Then, issue the following command to make the SCHEDxx changes effective:</p> <div class="language- extra-class"><pre class="language-text"><code>/SET SCH=xx
</code></pre><p>More info <a href="https://docs.zowe.org/stable/user-guide/configure-xmem-server.html#step-2-add-ppt-entries-to-the-system-parmlib">here</a>, step 2.</p>]]></instructions>
        <weight>1</weight>
        <skills>z/OS System Programmer</skills>
        <autoEnable>false</autoEnable>
        <canMarkAsFailed>true</canMarkAsFailed>
        <!--template-->
    </step>
    <step name="volume_retrieve" optional="true">
        <title>Retrieve the LOADLIB volume</title>
        <description>Automatically retrieves VOLUME for non-SMS LOADLIB</description>
        <prereqStep name="copy_artifacts"/>
        <condition>
            <expression>"1"=="1"</expression>
            <description>This step is skipped if VOLUME or Storage Class are known</description>
            <targetStateSet>
                <extendStateExpression>
                    <description>Checking VOLUME and Storage Class</description>
                    <expression>(${instance-xmem_volume} &amp;&amp; ${instance-xmem_volume} != "") || (${instance-xmem_storclas} &amp;&amp; ${instance-xmem_storclas} != "")</expression>
                    <targetState>skipped</targetState>
                </extendStateExpression>
            </targetStateSet>
        </condition>
        <!--variableValues-->
        <instructions substitution="false">Run this step to retrieve the actual VOLUME of the LOADLIB</instructions>
        <weight>1</weight>
        <skills>z/OS System Programmer</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <template>
            <inlineTemplate substitution="true">set -e
mkdir -p ${instance-temp_folder}
listing=$(tsocmd "LISTDS ('${instance-zowe_dsn_prefix}.SZWEAUTH')")
volume=$(echo $listing|tr ' ' '\n'|sed -n "/--VOLUMES--/{n;p;}")
echo "xmem_volume=$volume"&gt;${_output}</inlineTemplate>
            <submitAs maxRc="0">shell-JCL</submitAs>
            <maxLrecl>1024</maxLrecl>
            <output needResolveConflicts="false" substitution="true">${instance-temp_folder}/volume</output>
        </template>
    </step>
    <step name="apf_auth" optional="false">
        <title>APF Authorize Load Library</title>
        <description>This step will dynamically APF authorize the Cross Memory Server LOADLIB</description>
        <prereqStep name="copy_artifacts"/>
        <!--variableValues-->
        <!-- condition -->
        <instructions substitution="true">Run this step to dynamically APF authorize the load library.
If you want the APF, to be permanent, add following library to your system authorization: ${instance-zowe_dsn_prefix}.SZWEAUTH</instructions>
        <weight>1</weight>
        <skills>z/OS System Programmer</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>PUT</httpMethod>
            <uriPath substitution="true">/zosmf/restconsoles/consoles/${_step-stepOwnerUpper}</uriPath>
            <requestBody substitution="true">#if(${instance-xmem_storclas} and $!{instance-xmem_storclas} != "")
#set($dasd = "SMS")
#else
#set($dasd = "VOLUME=${instance-xmem_volume}")
#end
{"cmd":"SETPROG APF,ADD,DSNAME=${instance-zowe_dsn_prefix}.SZWEAUTH,${dasd}"}</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <!-- REST mappings -->
        </rest>
    </step>
    <step name="start_xmem" optional="false">
        <title>Start the Cross Memory Server server</title>
        <description>This step starts the Cross Memory Server</description>
        <!--variableValues-->
        <!-- condition -->
        <instructions substitution="false">Run this step to start the Cross Memory Server.
<![CDATA[
You can also do it manually with the following operator command:
<code>S ZWESISTC,REUSASID=YES</code>

To stop the Cross Memory Server use this operator command:
<code>P ZWESISTC</code>
]]>
</instructions>
        <weight>1</weight>
        <skills>z/OS System Programmer</skills>
        <autoEnable>true</autoEnable>
        <canMarkAsFailed>false</canMarkAsFailed>
        <rest>
            <httpMethod>PUT</httpMethod>
            <uriPath substitution="true">/zosmf/restconsoles/consoles/${_step-stepOwnerUpper}</uriPath>
            <requestBody substitution="true">{"cmd":"S ZWESISTC,REUSASID=YES"}</requestBody>
            <expectedStatusCode>200</expectedStatusCode>
            <!-- REST mappings -->
        </rest>
    </step>
</workflow>
